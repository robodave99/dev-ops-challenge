name: "Infrastructure Provisioning and App Deployment"

on:
  push:
    branches:
      - main
    paths:
      - "main.tf"
      - "Dockerfile"
      - "app/**"
      - ".github/workflows/prov-deploy.yml"

jobs:
  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve

  deploy:
    name: "Deploy to ECS"
    runs-on: ubuntu-latest
    needs: terraform  # This ensures 'deploy' runs only after 'terraform' job succeeds

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          ECR_REPO="YOUR_ECR_REPOSITORY_URL"
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REPO:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster rails-cluster \
            --service rails-service \
            --force-new-deployment
